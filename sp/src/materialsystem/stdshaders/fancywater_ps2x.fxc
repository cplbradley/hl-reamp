// STATIC: "CONVERT_TO_SRGB"				"0..1"	[ps20b] [= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB"				"0..0"	[= 0] [XBOX]
// STATIC: "BASETEXTURE"					"0..1"
// STATIC: "MULTITEXTURE"					"0..1"
// STATIC: "REFLECT"						"0..1"
// STATIC: "REFRACT"						"0..1"
// STATIC: "ABOVEWATER"						"0..1"
// STATIC: "BLURRY_REFRACT"					"0..1"	[ps20b]
// STATIC: "FLOWMAP"						"0..1"  [ps20b]

// When we turn NORMAL_DECODE_MODE on, this shader only needs 0..1, not 0..2
// STATIC: "NORMAL_DECODE_MODE"				"0..0"	[XBOX]
// STATIC: "NORMAL_DECODE_MODE"				"0..0"	[PC]

// DYNAMIC: "PIXELFOGTYPE"					"0..1"
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"		"0..1"	[ps20b] [PC]
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"		"0..0"	[ps20b] [XBOX]

// SKIP: $MULTITEXTURE && $BASETEXTURE

#if defined(SHADER_MODEL_PS_2_0)
#	define BLURRY_REFRACT 0
#	define WRITE_DEPTH_TO_DESTALPHA 0
#endif

#include "water_ps2x_helper.h"


sampler RefractSampler			: register( s0 );
#if BASETEXTURE
sampler BaseTextureSampler		: register( s10 );
#endif
sampler ReflectSampler			: register( s1 );
#if BASETEXTURE
sampler LightmapSampler			: register( s2 );
#endif
sampler NormalSampler			: register( s3 );

#if FLOWMAP
	sampler FlowmapSampler			: register( s4 );
	sampler FlowNoiseSampler		: register( s5 );
#endif

const HALF4 vRefractTint			: register( c1 );
const HALF4 vReflectTint			: register( c4 );
const float4 g_ReflectRefractScale	: register( c5 ); // xy - reflect scale, zw - refract scale
const HALF4 g_WaterFogColor			: register( c6 );
const HALF4 g_WaterFogParams		: register( c7 );

const float4 g_PixelFogParams		: register( c8 );

const float3 g_EyePos				: register( c9 );

#if FLOWMAP
	const float2 g_vFlowScrollRate	: register( c10 );
#endif

const float4 g_vFlowParams1			: register( c13 );
#define g_flWorldUvScale  ( g_vFlowParams1.x ) // 1.0f / 10.0f
#define g_flNormalUvScale ( g_vFlowParams1.y ) // 1.0f / 1.15f
#define g_flBumpStrength  ( g_vFlowParams1.z ) // 3.0f
#define g_flTimeScale     ( g_vFlowParams1.w ) // 1.0f

const float4 g_vFlowParams2			: register( c14 );
#define g_flFlowTimeIntervalInSeconds ( g_vFlowParams2.x ) // 0.4f // Number of seconds to lerp from texture 1 to texture 2
#define g_flFlowUvScrollDistance      ( g_vFlowParams2.y ) // 0.25f // Distance in uv space to fetch
#define g_flNoiseScale                ( g_vFlowParams2.z )
#define g_flColorFlowLerpExp          ( g_vFlowParams2.w )

const float4 g_vColorFlowParams1			: register( c26 );
#define g_flColorFlowUvScale				( g_vColorFlowParams1.x ) // 1.0f / 1.15f
#define g_flColorFlowTimeScale				( g_vColorFlowParams1.y ) // 1.0f
#define g_flColorFlowTimeIntervalInSeconds	( g_vColorFlowParams1.z ) // 0.4f // Number of seconds to lerp from texture 1 to texture 2
#define g_flColorFlowUvScrollDistance		( g_vColorFlowParams1.w ) // 0.25f // Distance in uv space to fetch

#define g_WaterFogStart			g_WaterFogParams.x
#define g_WaterFogEndMinusStart	g_WaterFogParams.y
#define g_Reflect_OverBright	g_WaterFogParams.z

struct PS_INPUT
{
	float2 vBumpTexCoord			: TEXCOORD0;
	half3 vTangentEyeVect			: TEXCOORD1;
	float4 vReflectXY_vRefractYX	: TEXCOORD2;
	float4 vWorldPos_projPosW		: TEXCOORD3;
	float4 vProjPos					: TEXCOORD4;
	float screenCoord				: TEXCOORD5;
#if MULTITEXTURE
	float4 vExtraBumpTexCoord		: TEXCOORD6;
#endif
#if ( BASETEXTURE && !FLOWMAP )
// CENTROID: TEXCOORD6
	HALF4 lightmapTexCoord1And2		: TEXCOORD6;
// CENTROID: TEXCOORD7
	HALF4 lightmapTexCoord3			: TEXCOORD7;
#endif

	float4 fogFactorW				: COLOR1;
};

float4 main( PS_INPUT i ) : COLOR
{
	DrawWater_params_t params;

	params.vBumpTexCoord = i.vBumpTexCoord;
#if MULTITEXTURE
	params.vExtraBumpTexCoord = i.vExtraBumpTexCoord;
#endif
	params.vReflectXY_vRefractYX = i.vReflectXY_vRefractYX;
	params.w = i.vWorldPos_projPosW.w;
	params.vReflectRefractScale = g_ReflectRefractScale;
	params.fReflectOverbright = g_Reflect_OverBright;
	params.vReflectTint = vReflectTint;
	params.vRefractTint = vRefractTint;
	params.vTangentEyeVect = i.vTangentEyeVect;
	params.waterFogColor = g_WaterFogColor;
#if BASETEXTURE
	params.lightmapTexCoord1And2 = i.lightmapTexCoord1And2;
	params.lightmapTexCoord3 = i.lightmapTexCoord3;
#endif
	params.vProjPos = i.vProjPos;
	params.pixelFogParams = g_PixelFogParams;
	params.fWaterFogStart = g_WaterFogStart;
	params.fWaterFogEndMinusStart = g_WaterFogEndMinusStart;
	params.vEyePos = g_EyePos;
	params.vWorldPos = i.vWorldPos_projPosW.xyz;

	float4 vResult;
	float fogFactor;
	
		float4 vNormalWs;
	float4 vFlowColor = float4( 0.0f, 0.0f, 0.0f, 0.0f );
	#if ( FLOWMAP )
	{
		float flWorldUvScale				= g_flWorldUvScale;
		float flNormalUvScale				= g_flNormalUvScale;
		float flFlowTimeIntervalInSeconds	= g_flFlowTimeIntervalInSeconds;
		float flFlowUvScrollDistance		= g_flFlowUvScrollDistance;
		float flBumpStrength				= g_flBumpStrength;
		float flTimeScale					= g_flTimeScale;
		float flNoiseScale					= g_flNoiseScale;

		// Input uv
		float2 vWorldUv = i.vBumpTexCoord.xy * flWorldUvScale;
		float2 vUv1 = float2( i.worldPos.x, -i.worldPos.y ) * flNormalUvScale;
		float2 vUv2 = vUv1.xy;

		// Noise texture is used to offset the time interval different spatially so we don't see pulsing
		float flNoise = tex2D( FlowNoiseSampler, float2( i.worldPos.x, -i.worldPos.y ) * flNoiseScale ).g;

		// Flow texel has a 2D flow vector in the rg channels of the texture
		float4 vFlowTexel = tex2D( FlowmapSampler, vWorldUv.xy );
		#if ( FLOW_DEBUG == 1 ) // Flow vectors
		{
			vResult.rgba = float4( pow( vFlowTexel.rgb, 2.2f ), 0 );
			flFogFactor = 0;
			return FinalOutput( float4( vResult.rgb, 1.0f ), flFogFactor, PIXELFOGTYPE, TONEMAP_SCALE_NONE );
		}
		#elif ( FLOW_DEBUG == 2 ) // Noise
		{
			vResult.rgba = pow( flNoise, 2.2 );
			flFogFactor = 0;
			return FinalOutput( float4( vResult.rgb, 1.0f ), flFogFactor, PIXELFOGTYPE, TONEMAP_SCALE_NONE );
		}
		#endif

		// Unpack world flow vector from texture
		float2 vFlowVectorTs = ( vFlowTexel.rg * 2.0f ) - 1.0f;

		float flTimeInIntervals = ( ( g_flTime * flTimeScale ) + flNoise ) / ( flFlowTimeIntervalInSeconds * 2.0f );
		float flScrollTime1 = frac( flTimeInIntervals );
		float flScrollTime2 = frac( flTimeInIntervals + 0.5f ); // Half an interval off from texture 1

		// Every interval has a unique offset so we don't see the same bump texels repeating continuously
		float flOffset1 = floor( flTimeInIntervals ) * 0.311f;
		float flOffset2 = floor( flTimeInIntervals + 0.5f ) * 0.311f + 0.5f; // The +0.5 is to match the phase offset

		// Final flow uv is originalUv + interval offset + ( flowvector * scroll
		float2 vFlowUv1 = vUv1.xy + flOffset1 + ( flScrollTime1 * ( flFlowUvScrollDistance * vFlowVectorTs.xy ) );
		float2 vFlowUv2 = vUv2.xy + flOffset2 + ( flScrollTime2 * ( flFlowUvScrollDistance * vFlowVectorTs.xy ) );

		// Lerp values to blend between the two layers of bump
		float flWeight1 = abs( ( 2.0f * frac( flTimeInIntervals + 0.5f ) ) - 1.0f );
		float flWeight2 = abs( ( 2.0f * frac( flTimeInIntervals ) ) - 1.0f );

		float4 vNormalTexel1 = tex2D( NormalSampler, vFlowUv1.xy );
		float4 vNormalTexel2 = tex2D( NormalSampler, vFlowUv2.xy );

		float3 vNormal1 = ( vNormalTexel1.rgb );
		float3 vNormal2 = ( vNormalTexel2.rgb );

		// Combine both layers
		vNormalWs.xy = UnpackNormal2D( lerp( vNormal1.xy, vNormal2.xy, flWeight2 ) );

		// Change bump strength based on the length of the flow vector
		//vNormalWs.xy *= ( length( vFlowVectorTs.xy ) + 0.05f ) * flBumpStrength;
		vNormalWs.xy *= ( ( vFlowVectorTs.x * vFlowVectorTs.x + vFlowVectorTs.y * vFlowVectorTs.y ) + 0.1f ) * flBumpStrength;

		// Generate normal from 2D scaled normal
		vNormalWs.xyz = ComputeNormalFromXY( vNormalWs.xy );
		//return pow( float4( vNormalWs.xy*0.5+0.5, 0, 0), 2.2);

		//vResult.rgba = float4( SrgbGammaToLinear( vNormalWs.xyz * 0.5 + 0.5 ), 0 );
		//flFogFactor = 0;
		//return FinalOutput( float4( vResult.rgb, 1.0f ), flFogFactor, PIXELFOGTYPE, TONEMAP_SCALE_NONE );

		vNormalWs.a = 1.0f;

		//-------------------------------------------------------------//
		// Specifying a base texture with flow gives us a sludge layer //
		//-------------------------------------------------------------//
		#if ( BASETEXTURE )
		{
			float2 vColorUv = float2( i.worldPos.x, -i.worldPos.y ) * g_flColorFlowUvScale;

			float flTimeInIntervals = ( ( g_flTime * g_flColorFlowTimeScale ) + flNoise ) / ( g_flColorFlowTimeIntervalInSeconds * 2.0f );
			float flScrollTime1 = frac( flTimeInIntervals ) - 0.5;
			float flScrollTime2 = frac( flTimeInIntervals + 0.5f ) - 0.5; // Half an interval off from texture 1

			float flOffset1 = floor( flTimeInIntervals ) * 0.311f;
			float flOffset2 = floor( flTimeInIntervals + 0.5f ) * 0.311f + 0.5f; // The +0.5 is to match the phase offset

			float2 vColorFlowUv1 = vColorUv.xy + flOffset1 + ( flScrollTime1 * ( g_flColorFlowUvScrollDistance * vFlowVectorTs.xy ) );
			float2 vColorFlowUv2 = vColorUv.xy + flOffset2 + ( flScrollTime2 * ( g_flColorFlowUvScrollDistance * vFlowVectorTs.xy ) );

			float flWeight1 = pow( abs( ( 2.0f * frac( flTimeInIntervals + 0.5f ) ) - 1.0f ), g_flColorFlowLerpExp );
			float flWeight2 = pow( abs( ( 2.0f * frac( flTimeInIntervals ) ) - 1.0f ), g_flColorFlowLerpExp );

			float4 vColorTexel1 = tex2D( BaseTextureSampler, vColorFlowUv1.xy * .235 );
			float4 vColorTexel2 = tex2D( BaseTextureSampler, vColorFlowUv2.xy * .235 );
			vFlowColor.rgba = vColorTexel1.rgba * flWeight1;
			vFlowColor.rgba += vColorTexel2.rgba * flWeight2;
		}
		#endif
	}
	#endif
	DrawWater( params, 
			   // yay. . can't put sampler in a struct.
#if BASETEXTURE
			   BaseTextureSampler, 
			   LightmapSampler, 
#endif
			   NormalSampler, RefractSampler, ReflectSampler,
			   vResult, fogFactor );

	return FinalOutput( float4( vResult.rgb, 1.0f ), fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_NONE, (WRITE_DEPTH_TO_DESTALPHA != 0), i.vProjPos.z );
}

