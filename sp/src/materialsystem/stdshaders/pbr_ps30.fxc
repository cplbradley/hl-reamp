//==================================================================================================
//
// Physically Based Rendering pixel shader for brushes and models
//
//==================================================================================================

// STATIC: "FLASHLIGHT"                 "0..1"
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"  "0..2"
// STATIC: "EMISSIVE"                   "0..1"
// STATIC: "LIGHTMAPPED"                "0..1"
// STATIC: "PARALLAXOCCLUSION"          "0..1"
// STATIC: "DETAILTEXTURE"              "0..1"
// STATIC: "LERPENVMAP"                 "0..1"

// DYNAMIC: "FLASHLIGHTSHADOWS"         "0..1"
// DYNAMIC: "LIGHTMAPPED_MODEL"         "0..1"
// DYNAMIC: "PIXELFOGTYPE"              "0..1"
// DYNAMIC: "WRITEWATERFOGTODESTALPHA"  "0..1"
// DYNAMIC: "NUM_LIGHTS"                "0..4"
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"  "0..1"

// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTSHADOWS == 1 )
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTDEPTHFILTERMODE != 0 )
// SKIP: ( $FLASHLIGHT == 1 ) && ( $EMISSIVE != 0 )
// SKIP: ( $LIGHTMAPPED == 1 ) && ( $NUM_LIGHTS > 0 )
// SKIP: ( $LIGHTMAPPED == 1 ) && ( $LIGHTMAPPED_MODEL == 1 )
// SKIP: ($PIXELFOGTYPE == 0) && ($WRITEWATERFOGTODESTALPHA != 0)

#include "common_ps_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_lightmappedgeneric_fxc.h"
#include "shader_constant_register_map.h"

#include "pbr_common_ps2_3_x.h"

const float4 g_DiffuseModulation                : register(PSREG_DIFFUSE_MODULATION);
const float4 g_ShadowTweaks                     : register(PSREG_ENVMAP_TINT__SHADOW_TWEAKS);
const float3 cAmbientCube[6]                    : register(PSREG_AMBIENT_CUBE);
const float4 g_EyePos                           : register(PSREG_EYEPOS_SPEC_EXPONENT);
const float4 g_FogParams                        : register(PSREG_FOG_PARAMS);
const float4 g_FlashlightAttenuationFactors     : register(PSREG_FLASHLIGHT_ATTENUATION);
const float4 g_FlashlightPos                    : register(PSREG_FLASHLIGHT_POSITION_RIM_BOOST);
const float4x4 g_FlashlightWorldToTexture       : register(PSREG_FLASHLIGHT_TO_WORLD_TEXTURE);

PixelShaderLightInfo cLightInfo[3]              : register(PSREG_LIGHT_INFO_ARRAY);         // 2 registers each - 6 registers total (4th light spread across w's)

const float4 g_ParallaxParms                    : register( c27 );
#define PARALLAX_DEPTH                          g_ParallaxParms.r
#define PARALLAX_CENTER                         g_ParallaxParms.g
#define ENVMAPLERP								g_ParallaxParms.b

const float4 g_DetailParams						: register(c26);

sampler BaseTextureSampler          : register(s0);     // Base map, selfillum in alpha
sampler NormalTextureSampler        : register(s1);     // Normal map
sampler EnvmapSampler               : register(s2);     // Cubemap
sampler ShadowDepthSampler          : register(s4);     // Flashlight shadow depth map sampler
sampler RandRotSampler              : register(s5);     // RandomRotation sampler
sampler FlashlightSampler           : register(s6);     // Flashlight cookie 
sampler LightmapSampler             : register(s7);     // Lightmap
sampler MRAOTextureSampler          : register(s10);    // MRAO texture
#if EMISSIVE
sampler EmissionTextureSampler      : register(s11);    // Emission texture
#endif
sampler DetailSampler			: register( s12 );
sampler DetailMaskSampler		: register( s13 );
sampler EnvmapSampler2			: register( s14 );
#define ENVMAPLOD (g_EyePos.a)

struct PS_INPUT
{
    float4 baseTexCoord             : TEXCOORD0;
	float2 normalTexCoord			: TEXCOORD1;
    float4 lightAtten               : TEXCOORD2;
    float3 worldPos                 : TEXCOORD3;
    float3 projPos                  : TEXCOORD4;
    float4 lightmapTexCoord1And2    : TEXCOORD5; 
    float4 lightmapTexCoord3        : TEXCOORD6;
	float3x3 mTangentSpaceTranspose : TEXCOORD7;
};

float4 multidetailV1(float4 basetexture, float4 detailColor, float4 detailMask, float detailBlendFactor)
{
	float4 combined1 = TextureCombine(basetexture, detailColor.r, 0, detailMask.r * detailBlendFactor) * detailMask.r;
	float4 combined2 = TextureCombine(basetexture, detailColor.g, 0, detailMask.g * detailBlendFactor) * detailMask.g;
	float4 combined3 = TextureCombine(basetexture, detailColor.b, 0, detailMask.b * detailBlendFactor) * detailMask.b;
	float totalmask = detailMask.r + detailMask.g + detailMask.b;
	float4 detailed = (combined1 + combined2 + combined3) * totalmask;
	float4 undetailed = basetexture * (1 - totalmask);
	float4 albedo = detailed + undetailed;
	return albedo;
}
float4 multidetailV2(float4 basetexture, float4 detailColor, float4 detailMask, float totalblend)
{
	float detail1 = detailMask.r * detailColor.r;
	float detail2 = detailMask.g * detailColor.g;
	float detail3 = detailMask.b * detailColor.b;
	float cd1 = lerp(1,detail1,detailMask.r * totalblend);
	float cd2 = lerp(1,detail2,detailMask.g * totalblend);
	float cd3 = lerp(1,detail3,detailMask.b * totalblend);
	float combined = (cd1 * detailMask.r) + (cd2*detailMask.g) + (cd3*detailMask.b);
	float totalmask = detailMask.r + detailMask.g + detailMask.b;
	float4 detail = TextureCombine(basetexture,float4(combined,combined,combined,1),0,totalmask);
	return detail;
}
float4 GetTotalDetail(float4 detailColor, float4 detailMask, float totalblend)
{
	float detail1 = detailMask.r * detailColor.r;
	float detail2 = detailMask.g * detailColor.g;
	float detail3 = detailMask.b * detailColor.b;
	float cd1 = lerp(1,detail1,detailMask.r * totalblend);
	float cd2 = lerp(1,detail2,detailMask.g * totalblend);
	float cd3 = lerp(1,detail3,detailMask.b * totalblend);
	float combined = (cd1 * detailMask.r) + (cd2*detailMask.g) + (cd3*detailMask.b);
	float4 detail = float4(combined,combined,combined,1);
	return detail;
}
float roughnessDetail(float rough,float detail,float factor)
{
	return rough + ((1 - detail) * factor / 4);
}

// Entry point
float4 main(PS_INPUT i) : COLOR
{
	bool bDetailTexture = DETAILTEXTURE ? true : false;
	
	bool bHasDetailMask = g_DetailParams.y;
	bool bMultiDetail = g_DetailParams.z;
	float fDebugState = g_ParallaxParms.w;
	bool bBuildingCubemaps = g_DetailParams.w;
	
	float detailBlendFactor = g_DetailParams.x;
	
    #define EnvAmbientCube cAmbientCube
	
	float3 worldNormal = i.mTangentSpaceTranspose[2];
	
    float3 surfNormal = normalize(worldNormal);
    float3 surfTangent;
    float3 surfBase; 
    float flipSign;
	
	float2 baseTexCoord = i.baseTexCoord.xy;
	float2 detailTexCoord = i.baseTexCoord.zw;

    float3x3 normalBasis = compute_tangent_frame(surfNormal, i.worldPos, baseTexCoord.xy, surfTangent, surfBase, flipSign);
	
	float3 f3ViewDir = normalize(g_EyePos.xyz - i.worldPos);

#if PARALLAXOCCLUSION
    float3 outgoingLightRay = g_EyePos.xyz - i.worldPos;
    float3 outgoingLightDirectionTS = worldToRelative( outgoingLightRay, surfTangent, surfBase, surfNormal);
    float2 correctedTexCoord = parallaxCorrect(baseTexCoord.xy, outgoingLightDirectionTS, NormalTextureSampler, PARALLAX_DEPTH, PARALLAX_CENTER);
	float2 correctedDetailTexCoord = parallaxCorrect(detailTexCoord.xy, outgoingLightDirectionTS, NormalTextureSampler, PARALLAX_DEPTH, PARALLAX_CENTER);
#else
	float2 correctedTexCoord = baseTexCoord.xy;
	float2 correctedDetailTexCoord = detailTexCoord.xy;
#endif

	float3 textureNormal = normalize((tex2D(NormalTextureSampler, correctedTexCoord.xy).xyz - float3(0.5, 0.5, 0.5)) * 2);
    float3 normal = normalize(mul(textureNormal, normalBasis)); // World Normal
	float3 faceNormal = normalize(mul(textureNormal,i.mTangentSpaceTranspose));
	
	float4 basetexture = tex2D(BaseTextureSampler, correctedTexCoord.xy);
	float4 albedo = basetexture;
	float4 mrao = tex2D(MRAOTextureSampler, correctedTexCoord);
	
    float metalness = mrao.x;
	float roughness = mrao.y;
	float ambientOcclusion = mrao.z;
	
	if(bBuildingCubemaps)
	{
		metalness = min(metalness,0.75);
	}

#if DETAILTEXTURE
	float4 detailColor = tex2D( DetailSampler, correctedDetailTexCoord.xy );
	albedo = TextureCombine( basetexture, detailColor, 0, detailBlendFactor );
	
	if(bHasDetailMask)
	{
		float4 detailMask = tex2D(DetailMaskSampler,correctedTexCoord.xy);
		if(bMultiDetail)
		{
		
			albedo = multidetailV1(basetexture,detailColor,detailMask,detailBlendFactor);
		}
		else
		{
			albedo = TextureCombine( basetexture, detailColor, 0, detailMask.r * detailBlendFactor );
		}
	}
#endif

#if EMISSIVE
    float3 emission = tex2D(EmissionTextureSampler, correctedTexCoord).xyz;
#endif

    textureNormal.y *= flipSign; // Fixup textureNormal for ambient lighting

    float3 outgoingLightDirection = normalize(g_EyePos.xyz - i.worldPos); // Lo
    float lightDirectionAngle = max(0, dot(normal, outgoingLightDirection)); // cosLo
	float3 incomingViewDir = normalize(i.worldPos - g_EyePos.xyz);
	float lightViewDirectionAngle = max(0,dot(normal,incomingViewDir));

	float3 specularReflectionVector = 2.0 * lightDirectionAngle * normal - outgoingLightDirection; // Lr

    float3 dielectricCoefficient = 0.04; // F0 dielectric
    float3 fresnelReflectance = albedo.rgb * metalness + (dielectricCoefficient * (1 - metalness));
	
	float3 f3Albedo = albedo.rgb * (1.0f - metalness);

    // Prepare ambient and direct
    float3 ambientLighting = 0.0;
    float3 directLighting = 0.0;

 if (!FLASHLIGHT)
    {
#if LIGHTMAPPED_MODEL == 1
        float3 diffuseIrradiance = ambientLookup(normal, EnvAmbientCube, textureNormal, baseTexCoord.xyyy, i.lightmapTexCoord3, LightmapSampler, g_DiffuseModulation);
#else
        float3 diffuseIrradiance = ambientLookup(normal, EnvAmbientCube, textureNormal, i.lightmapTexCoord1And2, i.lightmapTexCoord3, LightmapSampler, g_DiffuseModulation);
#endif
        float3 ambientLightingFresnelTerm = fresnelSchlick(fresnelReflectance, lightDirectionAngle); // F

        float3 diffuseContributionFactor = lerp(1 - ambientLightingFresnelTerm, 0, metalness); // kd

		
        float4 specularUV = float4(specularReflectionVector, roughness * ENVMAPLOD);
		
#if LERPENVMAP
		float3 lookupHigh = ENV_MAP_SCALE * lerp(texCUBElod(EnvmapSampler, specularUV).xyz,texCUBElod(EnvmapSampler2,specularUV).xyz,ENVMAPLERP);
#else
		float3 lookupHigh = ENV_MAP_SCALE * texCUBElod(EnvmapSampler, specularUV).xyz;
#endif

#if LIGHTMAPPED
		float3 lookupLow = lookupHigh;
#else
        float3 lookupLow = PixelShaderAmbientLight(normal, EnvAmbientCube);
#endif
		
        float3 specularIrradiance = lerp(lookupHigh, lookupLow, roughness * roughness);
		
        float3 diffuseIBL = diffuseContributionFactor * f3Albedo * diffuseIrradiance;
		
		if(fDebugState == 1.0f)
			return float4(diffuseIBL,1.0f);
			
		//float3 diffuseIBL = f3Albedo * diffuseIrradiance;

#if LIGHTMAPPED
		float3 envBRDF = EnvBRDFScatterSpecular(fresnelReflectance,roughness,dot(normal,f3ViewDir));
		if(fDebugState == 2.0f)
			return float4(envBRDF,1.0f);
			
        float3 specularIBL = envBRDF * specularIrradiance;
		ambientLighting = diffuseIBL + specularIBL;
		
		float3 f3Lightmap = ambientLookupLightmap(normal,textureNormal,i.lightmapTexCoord1And2,i.lightmapTexCoord3,LightmapSampler,g_DiffuseModulation);
		
		if(!bBuildingCubemaps)
		{

		float3 f3DomColor;
		float3 f3DomDir = f3DomColorAndDir(LightmapSampler, g_DiffuseModulation.xyz, textureNormal,i.lightmapTexCoord1And2,i.lightmapTexCoord3,f3DomColor);
		
		f3DomDir = mul(i.mTangentSpaceTranspose,f3DomDir);
		
		directLighting += StaticBRDF_Diffuse(f3Albedo, fresnelReflectance, roughness, f3ViewDir, faceNormal, f3DomDir, f3Lightmap, f3DomColor);
		}
		else
		{
			directLighting += f3Albedo * f3Lightmap;
		}
		
#else
		float3 specularIBL = specularIrradiance * EnvBRDFApprox(fresnelReflectance, roughness, lightDirectionAngle);
		ambientLighting = diffuseIBL + specularIBL;
		
		for (uint n = 0; n < NUM_LIGHTS; ++n)
		{
			float3 LightIn = normalize(PixelShaderGetLightVector(i.worldPos, cLightInfo, n));
			float3 LightColor = PixelShaderGetLightColor(cLightInfo, n) * GetAttenForLight(i.lightAtten, n); // Li

			directLighting += calculateLight(LightIn, LightColor, outgoingLightDirection,
				normal, fresnelReflectance, roughness, metalness, lightDirectionAngle, albedo.rgb);
		}
#endif
	}

    if (FLASHLIGHT)
    {
    // Start flashlight
    float4 flashlightSpacePosition = mul(float4(i.worldPos, 1.0), g_FlashlightWorldToTexture);
    clip( flashlightSpacePosition.w ); // Stop projected textures from projecting backwards (only really happens if they have a big FOV because they get frustum culled)
    float3 vProjCoords = flashlightSpacePosition.xyz / flashlightSpacePosition.w;

    float3 delta = g_FlashlightPos.xyz - i.worldPos;
    float distSquared = dot(delta, delta);
    float dist = sqrt(distSquared);

    float3 flashlightColor = tex2D(FlashlightSampler, vProjCoords.xy);
    flashlightColor *= cFlashlightColor.xyz;

#if FLASHLIGHTSHADOWS
    float flashlightShadow = DoFlashlightShadow(ShadowDepthSampler, RandRotSampler, vProjCoords, i.projPos, FLASHLIGHTDEPTHFILTERMODE, g_ShadowTweaks, true);
    float flashlightAttenuated = lerp(flashlightShadow, 1.0, g_ShadowTweaks.y);         // Blend between fully attenuated and not attenuated
    float fAtten = saturate(dot(g_FlashlightAttenuationFactors.xyz, float3(1.0, 1.0 / dist, 1.0 / distSquared)));
    flashlightShadow = saturate(lerp(flashlightAttenuated, flashlightShadow, fAtten));  // Blend between shadow and above, according to light attenuation
    flashlightColor *= flashlightShadow;
#endif // FLASHLIGHTSHADOWS

    float farZ = g_FlashlightAttenuationFactors.w;
    float endFalloffFactor = RemapValClamped(dist, farZ, 0.6 * farZ, 0.0, 1.0);

    float3 flashLightIntensity = flashlightColor * endFalloffFactor;
        
    float3 flashLightIn = normalize(g_FlashlightPos.xyz - i.worldPos);

    directLighting += max(0, calculateLight(flashLightIn, flashLightIntensity, outgoingLightDirection,
        normal, fresnelReflectance, roughness, metalness, lightDirectionAngle, albedo.rgb));
    // End flashlight	
  }
	
	
    float fogFactor = CalcPixelFogFactor(PIXELFOGTYPE, g_FogParams, g_EyePos.xyz, i.worldPos.xyz, i.projPos.z);

#if !FLASHLIGHT

#if WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)
    float alpha = fogFactor;
#else
    float alpha = albedo.a;
#endif // WRITEWATERFOGTODESTALPHA && (PIXELFOGTYPE == PIXEL_FOG_TYPE_HEIGHT)

#else

    float alpha = 0.0f;

#endif // !FLASHLIGHT

    bool bWriteDepthToAlpha = (WRITE_DEPTH_TO_DESTALPHA != 0) && (WRITEWATERFOGTODESTALPHA == 0);

    float3 combinedLighting = (directLighting + ambientLighting) * ambientOcclusion;
#if EMISSIVE && !FLASHLIGHT
    combinedLighting += emission;
#endif

    alpha *= g_DiffuseModulation.a;
	
	float4 finalColor = float4(combinedLighting, alpha);
	
    return FinalOutput(finalColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, bWriteDepthToAlpha, i.projPos.z);
}
